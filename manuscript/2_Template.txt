# Template
Flask uses [Jinja2](http://jinja.pocoo.org) as the template engine, allowing users to customize HTML pages based on various kinds of Python variables.

## String and number

String and number, and Python variables in general can be passed into the templates as follow

{format: python, line-numbers: false, caption: "app.py"}
```
from flask import Flask
from flask import render_template
app = Flask(__name__)

@app.route('/')
def index():
	text = 'custom text'
	number = 100
    return render_template('index.html', text=text, number=number)
```

HTML templates should be stored under the directory named `templates`, and Flask will know to look for them. Inside the templates, use double quotes to surround the variable names you would like Jinja2 to render. 

{format: html, line-numbers: false, caption: "templates/index.html"}
```
<p>My text is {{ text }}</p>
<p>My number is {{ number }}</p>
```

You can also add built-in operations and filters. Here is an example of rendering the string length, and simple calculation with the number.

{format: html, line-numbers: false, caption: "templates/index.html"}
```
<p>My text is {{ text }}</p>
<p>My text length is {{ text | length }}</p>
<p>My number is{{ number }}</p>
<p>My number doubled is {{ number * 2 }}</p>
```
![](images/2_string_number.png)

## Dictionary

Dictionary values can be rendered by using dot (`.`) or subscription (`[]`) syntax

{format: python, line-numbers: false, caption: "app.py"}
```
@app.route('/')
def index():
	user = {'name': 'John', 'age': 20}
	return render_template('index.html', user=user)
```

{format: html, line-numbers: false, caption: "templates/index.html"}
```
<p>Name: {{ user.name }}. Age: {{ user.age }}<p>
<p>Name: {{ user['name'] }}. Age: {{ user['age'] }}<p>
```
![](images/2_dictionary.png)

## List
List can be rendered with the `for` constrol structure in Jinja2

{format: python, line-numbers: false, caption: "app.py"}
```
@app.route('/')
def index():
	shopping_list = ['banana', 'egg', 'milk']
	return render_template('index.html', shopping_list=shopping_list)
```

{format: html, line-numbers: false, caption: "templates/index.html"}
```
<ul>
	{% for item in shopping_list %}
        <li>{{ item }}</li>
    {% endfor %}
</ul>
```
![](images/2_list.png)

## Developer notes
Jinja2 allows rendering, and manipulation of complex Python objects and data structures. Please refer to [this documentation](http://jinja.pocoo.org/docs/2.10/templates) for more information. 
